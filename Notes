
Notes regarding tracing rays between surface and source at depth z.

Max value for ray parameter is for horizontal ray at z, assuming 

		v(d) < v(z) where d < z.

***************** spline derivateon
Spline  f1 =   a0 + a1 * x + a2*x*x + a3 * x*x*x
        f1'      a1     +2*a2*x  + 3*a3 * x * x

a)	1 = a0
b)	0 = a0 + a1 + a2 + a3
c)      0 = a1
d)      0 = a1 + 2 a2 + 3 a3

using a and c: 
e)      0 = 1 + a2 + a3
f)     0 = 2 a2 + 3 a3 
double e and subtract from f:
       0 = -2  +  a3 = > a3 = 2
		         a2 =   -3

Spline  f2 =   a0 + a1 * x + a2*x*x + a3 * x*x*x
        f2'      a1     +2*a2*x  + 3*a3 * x * x

f2(0) = 0 , f2(1) = 0 , f2'(0 = 1 ; f2'(1) = 0

a0 = 0 ;   a1 = 1 ;  0 = 1 + a2 + a3 ; 0 = 1 + 2* a2 + 3* a3
double and sbtract:     0 = 1-2  + a3 => a3 = 1, a2 = -2 =>
    f2 = x - 2 * x * x + x*x*x

****************** end of spline derivation

Nov 16:
Tested different values for eartRadius in phases.py

 travelt -n 0 -l 2 -t file

file is ouput of pythin.py using differnt R (earthRadius) values.
rms values for residual differenc between Slunga and ray.c

R         rms resdiual difference

6389	13 ms
6394    12 ms
6399    13 ms

Nov 18:   Added handling of vertical rays (p = 0)
Nov 29:	Set up dayly backup to hekla using at and rsync.

2017:
Okt
25/10	Discussion with Ingi, who had talked with Menke.
If using direct raytracing, must constrain from models with triplication or hidden layers.
A reliable test for triplication would be useful, one could check for dx/dp, must be positive and continous. It
is relatively easy to implement contstraints using Monte Carlo.

26/10
Need to write a routine that tests for triplication on traveltime curve. 
It could be by looking for minimum value of dx/dp in a depth or ray parameter interval.
A sufficient condition is that gradient not be allowed to increase.

6/11
Information to be printed out from editeve:
	residual norm from Slunga.
	command line
